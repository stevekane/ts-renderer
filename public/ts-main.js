(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var BufferType;
(function (BufferType) {
    BufferType[BufferType["BYTE"] = 0] = "BYTE";
    BufferType[BufferType["UNSIGNED_BYTE"] = 1] = "UNSIGNED_BYTE";
    BufferType[BufferType["SHORT"] = 2] = "SHORT";
    BufferType[BufferType["UNSIGNED_SHORT"] = 3] = "UNSIGNED_SHORT";
    BufferType[BufferType["FLOAT"] = 4] = "FLOAT";
})(BufferType = exports.BufferType || (exports.BufferType = {}));
class Floats {
    constructor(size, value) {
        this.size = size;
        this.value = value;
        this.offset = 0;
        this.stride = 0;
        this.bufferType = BufferType.FLOAT;
    }
    setup(gl, a) {
        const { loc, size, bufferType, buffer, stride = 0, offset = 0 } = a;
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.enableVertexAttribArray(a.loc);
        gl.vertexAttribPointer(loc, size, toGLType(gl, bufferType), false, stride, offset);
    }
    set(gl, a, value) {
        gl.bufferData(gl.ARRAY_BUFFER, value, gl.DYNAMIC_DRAW);
    }
    teardown(gl, a) {
        gl.disableVertexAttribArray(a.loc);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
    }
}
exports.Floats = Floats;
function setupAttribute(gl, program, name, acfg) {
    const { value, bufferType, size, set, setup, teardown, offset = 0, stride = 0 } = acfg;
    const loc = gl.getAttribLocation(program, name);
    const buffer = gl.createBuffer();
    if (loc == null)
        return new Error(`Could not locate attr: ${name}`);
    if (buffer == null)
        return new Error(`Could not create buffer for attr: ${name}`);
    const a = { value, bufferType, size, offset, stride, loc, buffer, set, setup, teardown };
    setup(gl, a);
    set(gl, a, value);
    teardown(gl, a);
    return a;
}
exports.setupAttribute = setupAttribute;
function toGLType(gl, bufferType) {
    switch (bufferType) {
        case BufferType.FLOAT: return gl.FLOAT;
        case BufferType.SHORT: return gl.SHORT;
        case BufferType.BYTE: return gl.BYTE;
        case BufferType.UNSIGNED_SHORT: return gl.UNSIGNED_SHORT;
        case BufferType.UNSIGNED_BYTE: return gl.UNSIGNED_BYTE;
        default:
            const n = bufferType;
            return n;
    }
}

},{}],2:[function(require,module,exports){
"use strict";
const Uniforms_1 = require("./Uniforms");
const Attributes_1 = require("./Attributes");
function run(cmd, p) {
    const { gl, program } = cmd;
    const { attributes, uniforms, count } = p;
    gl.useProgram(program);
    for (const key in cmd.uniforms) {
        const { loc, value, set } = cmd.uniforms[key];
        const val = uniforms && uniforms[key] || value;
        set(gl, loc, val);
    }
    for (const key in cmd.attributes) {
        const a = cmd.attributes[key];
        const val = attributes && attributes[key];
        a.setup(gl, a);
        if (val != null)
            a.set(gl, a, val);
    }
    gl.drawArrays(gl.TRIANGLES, 0, count);
    for (const key in cmd.attributes) {
        const a = cmd.attributes[key];
        a.teardown(gl, a);
    }
    gl.useProgram(null);
}
exports.run = run;
function createCommand(gl, cfg) {
    const program = fromSource(gl, cfg.vsrc, cfg.fsrc);
    if (program instanceof Error)
        return program;
    const uniforms = setupUniforms(gl, program, cfg.uniforms);
    if (uniforms instanceof Error)
        uniforms;
    const attributes = setupAttributes(gl, program, cfg.attributes);
    if (attributes instanceof Error)
        return attributes;
    return { gl, program, uniforms, attributes };
}
exports.createCommand = createCommand;
function setupUniforms(gl, program, ucfgs) {
    const out = {};
    gl.useProgram(program);
    for (const key in ucfgs) {
        const uniform = Uniforms_1.setupUniform(gl, program, key, ucfgs[key]);
        if (uniform instanceof Error)
            return uniform;
        else
            out[key] = uniform;
    }
    gl.useProgram(null);
    return out;
}
function setupAttributes(gl, program, uattrs) {
    const out = {};
    gl.useProgram(program);
    for (const key in uattrs) {
        const attr = Attributes_1.setupAttribute(gl, program, key, uattrs[key]);
        if (attr instanceof Error)
            return attr;
        else
            out[key] = attr;
    }
    gl.useProgram(null);
    return out;
}
function compileShader(gl, kind, src) {
    const shader = gl.createShader(kind);
    const kindStr = kind === gl.VERTEX_SHADER ? 'VERTEX' : 'FRAGMENT';
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    return shader && gl.getShaderParameter(shader, gl.COMPILE_STATUS)
        ? shader
        : new Error(`${kindStr}: ${gl.getShaderInfoLog(shader) || ''}`);
}
exports.compileShader = compileShader;
function fromSource(gl, vsrc, fsrc) {
    const vertex = compileShader(gl, gl.VERTEX_SHADER, vsrc);
    const fragment = compileShader(gl, gl.FRAGMENT_SHADER, fsrc);
    const program = gl.createProgram();
    if (vertex instanceof Error)
        return vertex;
    if (fragment instanceof Error)
        return fragment;
    gl.attachShader(program, vertex);
    gl.attachShader(program, fragment);
    gl.linkProgram(program);
    return program && gl.getProgramParameter(program, gl.LINK_STATUS)
        ? program
        : new Error(gl.getProgramInfoLog(program) || '');
}
exports.fromSource = fromSource;

},{"./Attributes":1,"./Uniforms":4}],3:[function(require,module,exports){
"use strict";

},{}],4:[function(require,module,exports){
"use strict";
const utils_1 = require("./utils");
class UF {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform1f(h, t); }
}
exports.UF = UF;
class U2F {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform2f(h, t[0], t[1]); }
}
exports.U2F = U2F;
class U3F {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform3f(h, t[0], t[1], t[2]); }
}
exports.U3F = U3F;
class U4F {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform4f(h, t[0], t[1], t[2], t[3]); }
}
exports.U4F = U4F;
class UI {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform1i(h, t); }
}
exports.UI = UI;
class U2I {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform2i(h, t[0], t[1]); }
}
exports.U2I = U2I;
class U3I {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform3i(h, t[0], t[1], t[2]); }
}
exports.U3I = U3I;
class U4I {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform4i(h, t[0], t[1], t[2], t[3]); }
}
exports.U4I = U4I;
class UFV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform1fv(h, utils_1.asF32(t)); }
}
exports.UFV = UFV;
class U2FV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform2fv(h, utils_1.asF32(t)); }
}
exports.U2FV = U2FV;
class U3FV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform3fv(h, utils_1.asF32(t)); }
}
exports.U3FV = U3FV;
class U4FV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform4fv(h, utils_1.asF32(t)); }
}
exports.U4FV = U4FV;
class UIV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform1iv(h, utils_1.asI32(t)); }
}
exports.UIV = UIV;
class U2IV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform2iv(h, utils_1.asI32(t)); }
}
exports.U2IV = U2IV;
class U3IV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform3iv(h, utils_1.asI32(t)); }
}
exports.U3IV = U3IV;
class U4IV {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniform4iv(h, utils_1.asI32(t)); }
}
exports.U4IV = U4IV;
class UMatrix2 {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniformMatrix2fv(h, false, utils_1.asF32(t)); }
}
exports.UMatrix2 = UMatrix2;
class UMatrix3 {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniformMatrix3fv(h, false, utils_1.asF32(t)); }
}
exports.UMatrix3 = UMatrix3;
class UMatrix4 {
    constructor(value) {
        this.value = value;
    }
    set(gl, h, t) { gl.uniformMatrix4fv(h, false, utils_1.asF32(t)); }
}
exports.UMatrix4 = UMatrix4;
function setupUniform(gl, program, name, ucfg) {
    const { value, set } = ucfg;
    const loc = gl.getUniformLocation(program, name);
    if (loc == null)
        return new Error(`Could not find uniform ${name}`);
    else
        return (set(gl, loc, value), { value, set, loc });
}
exports.setupUniform = setupUniform;

},{"./utils":6}],5:[function(require,module,exports){
"use strict";
const Attributes = require("./Attributes");
exports.Attributes = Attributes;
const Uniforms = require("./Uniforms");
exports.Uniforms = Uniforms;
const Command = require("./Command");
exports.Command = Command;
const GLTypes = require("./GLTypes");
exports.GLTypes = GLTypes;

},{"./Attributes":1,"./Command":2,"./GLTypes":3,"./Uniforms":4}],6:[function(require,module,exports){
"use strict";
function asF32(t) {
    return t instanceof Float32Array ? t : new Float32Array(t);
}
exports.asF32 = asF32;
function asI32(t) {
    return t instanceof Int32Array ? t : new Int32Array(t);
}
exports.asI32 = asI32;
function toError(s, v) {
    return v == null ? new Error(s) : v;
}
exports.toError = toError;

},{}],7:[function(require,module,exports){
"use strict";
function loadBinary(uri) {
    return new Promise(function (res, rej) {
        const xhr = new XMLHttpRequest;
        xhr.responseType = 'arraybuffer';
        xhr.onload = _ => res(xhr.response);
        xhr.onerror = _ => rej(`Could not load ${uri}`);
        xhr.open('GET', uri);
        xhr.send();
    });
}
exports.loadBinary = loadBinary;
function loadString(uri) {
    return new Promise(function (res, rej) {
        const xhr = new XMLHttpRequest;
        xhr.onload = _ => res(xhr.response);
        xhr.onerror = _ => rej(`Could not load ${uri}`);
        xhr.open('GET', uri);
        xhr.send();
    });
}
exports.loadString = loadString;
function loadImage(uri) {
    return new Promise(function (res, rej) {
        const i = new Image;
        i.src = uri;
        i.onload = _ => res(i);
        i.onerror = rej;
    });
}
exports.loadImage = loadImage;

},{}],8:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const Load_1 = require("./Load");
const Commando_1 = require("./Commando");
const F32_BYTE_SIZE = 4;
function load(gl) {
    return __awaiter(this, void 0, void 0, function* () {
        const [vsrc, fsrc, diffuse, buffer] = yield Promise.all([
            Load_1.loadString('brick/vertex.glsl'),
            Load_1.loadString('brick/fragment.glsl'),
            Load_1.loadImage('brick/diffuse.jpg'),
            Load_1.loadBinary('brick/data.bin')
        ]);
        const positionCount = 9;
        const colorCount = 12;
        const program = Commando_1.Command.fromSource(gl, vsrc, fsrc);
        const bufferViews = {
            a_position: new Float32Array(buffer, 0, positionCount),
            a_color: new Float32Array(buffer, positionCount * F32_BYTE_SIZE, colorCount)
        };
        const textures = {
            diffuse
        };
        return program instanceof Error
            ? program
            : { count: 3, program, buffer, bufferViews, textures };
    });
}
function main(gl) {
    return __awaiter(this, void 0, void 0, function* () {
        const sceneData = yield load(gl);
        if (sceneData instanceof Error)
            return;
        const { count, buffer: b, program: p, bufferViews: { a_position, a_color } } = sceneData;
        const a_loc = {
            a_position: gl.getAttribLocation(p, 'a_position'),
            a_color: gl.getAttribLocation(p, 'a_color')
        };
        const u_loc = {
            u_time: gl.getUniformLocation(p, 'u_time')
        };
        const glBuffer = gl.createBuffer();
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.clearColor(0, 0, 0, 0);
        gl.useProgram(p);
        gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, b, gl.DYNAMIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl.useProgram(null);
        const render = function render() {
            gl.viewport(0, 0, c.width, c.height);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            gl.useProgram(p);
            gl.uniform1f(u_loc.u_time, performance.now());
            gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
            gl.enableVertexAttribArray(a_loc.a_position);
            gl.vertexAttribPointer(a_loc.a_position, 3, gl.FLOAT, false, 0, a_position.byteOffset);
            gl.enableVertexAttribArray(a_loc.a_color);
            gl.vertexAttribPointer(a_loc.a_color, 4, gl.FLOAT, false, 0, a_position.byteLength);
            gl.drawArrays(gl.TRIANGLES, 0, count);
            gl.disableVertexAttribArray(a_loc.a_position);
            gl.disableVertexAttribArray(a_loc.a_color);
            gl.bindBuffer(gl.ARRAY_BUFFER, null);
            gl.useProgram(null);
            requestAnimationFrame(render);
        };
        render();
    });
}
const c = document.getElementById('target');
const gl = c.getContext('webgl');
main(gl);

},{"./Commando":5,"./Load":7}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
